@model Models.PrinterModels.PrinterCreate

@{
    ViewBag.Title = "Create";
}

<h2 class="text-success">Create New Printer</h2>

@if (TempData.ContainsKey("NoPrinter"))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span>&times;</span>
        </button>
        @TempData["NoPrinter"]
    </div>
}


@using (Html.BeginForm("Create", "Printer", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal text-success">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.PrinterBrand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrinterBrand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrinterBrand, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrinterModel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrinterModel, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrinterModel, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">

            <div class="row">
                @Html.LabelFor(model => model.HasDualExtruder, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.HasDualExtruder)
                        @Html.ValidationMessageFor(model => model.HasDualExtruder, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>



            <div class="row">
                @Html.LabelFor(model => model.CanAutoLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.CanAutoLevel)
                        @Html.ValidationMessageFor(model => model.CanAutoLevel, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.HasHeatedBed, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.HasHeatedBed)
                        @Html.ValidationMessageFor(model => model.HasHeatedBed, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.HasWifi, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.HasWifi)
                        @Html.ValidationMessageFor(model => model.HasWifi, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.CanUpgrade, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.CanUpgrade)
                        @Html.ValidationMessageFor(model => model.CanUpgrade, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.HasCamera, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.HasCamera)
                        @Html.ValidationMessageFor(model => model.HasCamera, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-Label col-md-2" })
                <div>
                    <input type="file" name="ImageData" id="ImageData" onchange="fileCheck(this);" />
                </div>
            </div>

        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />

                <input type="button" value="Cancel" class="btn btn-light" onclick="goPrev()" />
                <script>
                    function goPrev() { window.history.back(); }
                </script>

            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
